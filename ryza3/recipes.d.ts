// AUTO-GENERATED by typescript-type-def

export default types;
export namespace types {
    export type I32 = number;
    export type U32 = number;
    export type RecipeIngredient = {

        /**
         * The item or category tag of this ingredient.
         */
        "tag": string;

        /**
         * Whether the tag refers to a category or an item.
         */
        "is_category": boolean;

        /**
         * The effect that is added by default, even if no material loops are filled in.
         */
        "initial_effect": (string | null);

        /**
         * The effect tags that this item adds.
         */
        "additional_effects": (string)[];
    };

    /**
     * The secret key info for a recipe.
     */
    export type SecretKeyInfo = {

        /**
         * The requirement for unlocking this level.
         * 
         * The type of requirement can be determined by the prefix of the string:
         * - `ITEM_ELEM_`: Element of the key
         * - `SECRET_KEY_MOTIF_`: Motif of the key
         * - `SECRET_KEY_RARITY_`: Rarity of the key
         */
        "requirement": string;

        /**
         * The reward for unlocking this level
         */
        "reward": string;
    };
    export type RingPredecessor = {

        /**
         * The direction of this node's predecessor.
         * 
         * This is an index in a clockwise direction, like so:
         * - 0: above (y - 2)
         * - 1: top right (x + 1, y - 1)
         * - 2: bottom right (x + 1, y + 1)
         * - 3: below (y + 2)
         * - 4: bottom left (x - 1, y + 1)
         * - 5: top left (x - 1, y - 1)
         */
        "direction": types.U32;

        /**
         * The requirement element value in the predecessor before this ring can be unlocked.
         */
        "required_value": (types.U32 | null);

        /**
         * The requirement element in the predecessor before this ring can be unlocked.
         */
        "required_element": (types.U32 | null);

        /**
         * The requirement quality in the recipe before this ring can be unlocked.
         */
        "required_quality": (types.U32 | null);
    };
    export type RingParameter = {

        /**
         * The value of the parameter. This could be a numeric value or a string that refers to an
         * item.
         */
        "value": string;

        /**
         * The element value required for this tier to be met. This is additive with the previous
         * tiers.
         */
        "element_value": types.U32;

        /**
         * Whether this element is hidden.
         */
        "hidden": boolean;
    };

    /**
     * A ring in a recipe, also called a material loop.
     */
    export type Ring = {

        /**
         * The element.
         * 
         * 0: Fire
         * 1: Ice
         * 2: Bolt
         * 3: Wind
         */
        "element": types.U32;

        /**
         * The effect type of the ring.
         * 
         * See `str_mix_feature_description` for more info.
         */
        "effect_type": types.U32;

        /**
         * Whether this is a core loop and must be filled in for the recipe to be completed.
         */
        "required": boolean;

        /**
         * The X coordinate, where negative is left and positive is right.
         */
        "x": types.I32;

        /**
         * The Y coordinate, where negative is up and positive is down.
         */
        "y": types.I32;

        /**
         * The pre-defined item or category to use, as defined in `itemrecipedata.xml`. Mutually
         * exclusive with `explicit_material`.
         */
        "restrict": (types.U32 | null);

        /**
         * The explicit material to use. This will be a different material than the 4 that are
         * pre-defined in the recipe. Mutually exclusive with `restrict`.
         */
        "explicit_material": (string | null);

        /**
         * The predecessor ring that this ring is connected to.
         * 
         * Each ring has at most 1 predecessor, and this predecessor must be unlocked before this ring
         * can be unlocked. There may also be additional requirements before it can be unlocked.
         */
        "predecessor": (types.RingPredecessor | null);

        /**
         * The parameters for the effects of this ring. Related to the `type`.
         */
        "effect_parameters": (types.RingParameter)[];
    };
    export type Recipe = {

        /**
         * The item that this recipe crafts.
         */
        "item_tag": string;

        /**
         * The sorting order of this recipe in the alchemy menu, if it is present there.
         */
        "sort": (types.I32 | null);

        /**
         * The base amount of the item that is crafted.
         */
        "make_num": types.U32;

        /**
         * The amount of time it takes to craft the item.
         */
        "hour": types.U32;

        /**
         * The category that this recipe is in
         */
        "recipe_category": string;

        /**
         * The core ingredients for this recipe.
         * 
         * At most 4 ingredients will be present, while the lower limit is likely 3.
         */
        "ingredients": (types.RecipeIngredient)[];

        /**
         * The secret key info for this recipe, if it is applicable.
         */
        "secret_key_info": ([types.SecretKeyInfo, types.SecretKeyInfo, types.SecretKeyInfo] | null);

        /**
         * The fields of this recipe, each containing a set of rings/material loops..
         */
        "fields": ((types.Ring)[])[];
    };
    export type FeatureDescription = {

        /**
         * The name of the effect.
         */
        "short_name": (string | null);
        "short_description": (string | null);

        /**
         * The format string for the effect, as shown in the Loop Info window.
         * 
         * For effects 1-4, this will be `null` and the item effect's descripion will be used instead.
         */
        "loop_info_format": (string | null);
        "description": (string | null);
    };
    export type RecipeData = {
        "recipes": (types.Recipe)[];

        /**
         * A lookup table for feature descriptions.
         */
        "feature_descriptions": Record<types.U32, types.FeatureDescription>;
    };
}
